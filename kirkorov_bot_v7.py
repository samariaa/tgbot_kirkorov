import asyncio
from asyncio import sleep
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, message
from aiogram.filters import Command
import random
from db import Database
from aiogram.enums import ParseMode
import config
import sys
import logging


bot = Bot(config.TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
db = Database('database')


# /start
@dp.message(Command('start'))
async def start(message: Message):
    await update_bd(message)
    await bot.send_message(chat_id=message.chat.id, text='üé© –ë–æ—Ç –ö–∏—Ä–∫–æ—Ä–æ–≤ - –æ—Ç–ª–∏—á–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —á–∞—Ç–∞, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ.\n\n\nüñêÔ∏è –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\nüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ - –ê–ª–µ–∫—Å–µ–π –°–∞–º–∞—Ä–∏–Ω\n‚öôÔ∏è –ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ —è–∑—ã–∫–µ Python\nüïπÔ∏è –•–æ—Å—Ç–∏—Ç—Å—è –Ω–∞ –æ–∫–ª–∞–¥ —Å–ø–µ—Ü–∞\nüçΩÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç <a href="https://www.tinkoff.ru/rm/samarin.aleksey61/jpgEd88277">–º–æ–∂–Ω–æ –∑–¥–µ—Å—å</a>\nüí° –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º @Lesha_Samarin\n\nüó®Ô∏è –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç: –î–∞, –ù–µ—Ç, –ú–æ–∂–Ω–æ(?), –ü–∏–∑–¥–∞, –ü–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç, –°–ø–∞—Å–∏–±–æ, –ë–ª—è, –ë–ª, –ë–ª—è—Ç—å, –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –î–æ–±—Ä–æ–µ, –¢–∞–∫—Å–∏, –•–æ—Ä–æ—à–æ, –§—É–∏, Fyi\nüé≤ –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–≥–æ–≤–æ—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 70% (—á—Ç–æ–±—ã –Ω–µ –Ω–∞–¥–æ–µ–¥–∞–ª –±–æ—Ç).\n\nüöÄ –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è. –û –Ω–æ–≤—ã—Ö —Ñ–∏—á–∞—Ö –∂–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    await bot.send_message(chat_id=message.chat.id, text='üî• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç 16.11.2023. üî•\n‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ.\n\nüßæ 1. –û–±–Ω–æ–≤–ª—ë–Ω —Å–ª–æ–≤–∞—Ä—å –∫–∞—Å–∞–Ω–∏–π:\n             - –ù–æ–≤—ã–µ –æ—Ç–≥–æ–≤–æ—Ä–∫–∏ (–∏—â–∏—Ç–µ —Å–∞–º–∏ü§û).\nüóØÔ∏è 2. –†–∞–Ω–¥–æ–º –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥–Ω—è—Ç –¥–æ 70%.\nü§ñ 3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏–µ:\n             - –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ë–î SQL,\n             - –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—É—à–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º(–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π),\n             - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞.')


@dp.message(Command('sendall'))
async def sendall(message: Message):
    if message.chat.type == 'private':
        if message.from_user.id == 730189336:
            text = message.text[9:]
            users = db.get_chats()
            for row in users:
                try:
                    await bot.send_message(row[0], text)
                    if int(row[1]) != 1:
                        db.set_active(row[0], 1)
                    await sleep(0.5)
                except:
                    db.set_active(row[0], 0)
            await bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞')


# –ú–æ–∂–Ω–æ
@dp.message(F.text.lower() == '–º–æ–∂–Ω–æ')
async def mojno(message: Message):
    await update_bd(message)
    await message.reply(f'–ù–µ—Ç, –Ω–æ –º–æ–∂–Ω–æ –î–∞—à–∫—É –∑–∞ –ª—è–∂–∫—É')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)



# –î–∞
@dp.message((F.text.lower() == '–¥–∞') | (F.text.lower() == '–¥–∞)') | (F.text.lower() == '–¥–∞))'))
async def da(message: Message):
    await update_bd(message)
    rnd_number = random.randint(1, 100)
    if rnd_number <= 70:
        await message.reply(f'–ü–∏–∑–¥–∞!')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)



# –ù–µ—Ç
@dp.message((F.text.lower() == '–Ω–µ—Ç') | (F.text.lower() == '–Ω–µ—Ç)') | (F.text.lower() == '–Ω–µ—Ç))'))
async def net(message: Message):
    await update_bd(message)
    rnd_number = random.randint(1, 100)
    if rnd_number <= 70:
        rnd_otvet = random.randint(1, 2)
        if rnd_otvet == 1:
            await message.reply(f'–ü–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç!')
        else:
            await message.reply(f'–ù–µ—Ç! –°–æ–≥–ª–∞—Å–µ–Ω! –¢—Ä–∏ —Ö—É—è –≤ –∂–æ–ø—É –Ω–µ –∑–∞—Å—É–Ω–µ—à—å!')


# –ü–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç
@dp.message(F.text.lower() == '–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç')
async def pidora_otvet(message: Message):
    await update_bd(message)
    await message.reply(f'–®–ª—é—Ö–∏ –∞—Ä–≥—É–º–µ–Ω—Ç!')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)


# –ë–ª—è—Ç—å
@dp.message((F.text.lower() == ('–±–ª')) | (F.text.lower() == ('–±–ª—è')) | (F.text.lower() == ('–±–ª—è—Ç—å')))
async def blat(message: Message):
    await update_bd(message)
    await message.reply(f'–ò—Ä–∏–Ω–∞! –Å–ø —Ç–≤–æ—é –º–∞—Ç—å!')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)


# –°–ø–∞—Å–∏–±–æ
@dp.message((F.text.lower() == ('—Å–ø–∞—Å–∏–±–æ')) | (F.text.lower() == ('—Å–ø—Å')))
async def sps(message: Message):
    await update_bd(message)
    rnd_number = random.randint(1, 100)
    if rnd_number <= 70:
        await message.reply(f'–ó–∞–¥–µ—Ä–∂–∏—Å—å —Å–µ–≥–æ–¥–Ω—è, –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—à—å –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)


# Contains!
# –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ
@dp.message(F.text.lower().contains('–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ') | (F.text.lower() == '–¥–æ–±—Ä–æ–µ'))
async def dobroe(message: Message):
    await update_bd(message)
    rnd_number = random.randint(1, 100)
    if rnd_number <= 70:
        rnd_otvet = random.randint(1, 6)
        if rnd_otvet == 1:
            await message.reply(f'–î–æ–±—Ä–æ–µ –∫–∞–ª–µ–∫–∏!')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)
        elif rnd_otvet == 3:
            await message.reply(f'–°–¥–æ–±–Ω–æ–≥–æ –¥–Ω—è –∫—Ä–µ–ø—ã—à–∏!')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)
        elif rnd_otvet == 4:
            await message.reply(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ö—Ä–µ–∑–∞–Ω—Ç–µ–º–∫–∏')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)
        elif rnd_otvet == 5:
            await message.reply(f'–ü–æ–∫–∞!')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)
        else:
            await message.reply(f'–ü–æ–∫–∞ —Ç–æ –æ–Ω–æ –¥–æ–±—Ä–æ–µ, —Å–æ–≥–ª–∞—Å–µ–Ω. –ù–æ –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–∞–∫–æ—Å—è—á–∏—à—å, –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ —Ç–µ–±—è –≤—ã–µ–±–µ—Ç')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)


# taxi
@dp.message(F.text.lower().contains('—Ç–∞–∫—Å–∏'))
async def taxi(message: Message):
    await update_bd(message)
    rnd_number = random.randint(1, 100)
    if rnd_number <= 70:
        await message.reply(f'–°–º–æ—Ç—Ä–∏, –æ–ø—è—Ç—å –ø–æ—Ç–æ–º –±–µ–∑ –¥–µ–Ω–µ–≥ –±—É–¥–µ—à—å —Ö—É–π —Å–æ—Å–∞—Ç—å')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)


# –•–æ—Ä–æ—à–æ
@dp.message(F.text.lower().contains('—Ö–æ—Ä–æ—à–æ'))
async def good(message: Message):
    await update_bd(message)
    await message.reply(f'–ß—Ç–æ–±—ã –≤ —Ä–∞–π–¥–µ—Ä–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ñ–∏—Å—Ç–∞—à–∫–∏ - –Ω—É–∂–Ω–æ –Ω–µ —Ö–æ—Ä–æ—à–æ, –∞ –∏–¥–µ–∞–ª—å–Ω–æ!')


# fyi
@dp.message(F.text.lower().contains('fyi') | F.text.lower().contains('—Ñ—É–∏'))
async def fyi(message: Message):
    await update_bd(message)
    await message.reply(f'–§—É–∏ - —Ñ–æ—Ä —é —Ö—É–∏')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)


# –ü–∏–∑–¥–∞
@dp.message(F.text.lower().contains('–ø–∏–∑–¥–∞'))
async def pizda(message: Message):
    await update_bd(message)
    rnd_number = random.randint(1, 100)
    if rnd_number <= 70:
        rnd_otvet = random.randint(1, 5)
        if rnd_otvet == 1:
            await message.reply(f'–¢—ã –º–µ–Ω—è —Å–≤–æ–µ–π –ø–∏–∑–¥–æ–π –Ω–µ –ø—É–≥–∞–π, –º–æ–≥—É –∏ —Å–≤–æ—é —Å–∫–∏–Ω—É—Ç—å')  # –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º (.answer –±–µ–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞)
        elif rnd_otvet == 2:
            await message.reply(f'–°–æ–≥–ª–∞—Å–µ–Ω –ø–∏–∑–¥–∞ –ø–∏–∑–¥–µ—Ü')
        elif rnd_otvet == 3:
            await message.reply(f'–ñ–¥—É —Ñ–æ—Ç–æ —Ç–≤–æ–µ–π –ø–∏–∑–¥—ã –≤ –ª–∏—á–∫–µ')
        elif rnd_otvet == 4:
            await message.reply(f'–ó–∞–µ–±–∞–ª–∏ –≤—ã —ç—Ç–æ–π –ø–∏–∑–¥–æ–π. –í—Å—ë, –∫–∏–¥–∞—é —Å–≤–æ—é!')
        else:
            await message.reply(f'–í –ø–æ–ª–µ –≤–µ—Ç–µ—Ä, –∞ –≤ –ø–∏–∑–¥–µ –¥—ã–º!')


async def update_bd(message):#update database
    if message.chat.type == 'private':
        if not db.user_exists(message.chat.id):
            db.add_user(message.chat.id, message.chat.type, message.chat.first_name, message.chat.last_name,
                        message.chat.username)
    else:
        if not db.chat_exists(message.chat.id):
            db.add_chat(message.chat.id, message.chat.type)


async def main():
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
